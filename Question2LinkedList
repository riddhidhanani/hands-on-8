class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def is_empty(self):
        return self.head is None

    def append(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            return
        last_node = self.head
        while last_node.next:
            last_node = last_node.next
        last_node.next = new_node

    def prepend(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    def delete_node(self, data):
        if self.head is None:
            return
        if self.head.data == data:
            self.head = self.head.next
            return
        current_node = self.head
        while current_node.next:
            if current_node.next.data == data:
                current_node.next = current_node.next.next
                return
            current_node = current_node.next

    def display(self):
        current_node = self.head
        while current_node:
            print(current_node.data, end=" -> ")
            current_node = current_node.next
        print("None")


# Example usage:
linked_list = LinkedList()

# Append elements to the linked list
linked_list.append(10)
linked_list.append(20)
linked_list.append(30)

# Display the linked list
linked_list.display()  # Output: 10 -> 20 -> 30 -> None

# Prepend an element to the linked list
linked_list.prepend(5)

# Display the linked list after prepending
linked_list.display()  # Output: 5 -> 10 -> 20 -> 30 -> None

# Delete an element from the linked list
linked_list.delete_node(20)

# Display the linked list after deleting
linked_list.display()  # Output: 5 -> 10 -> 30 -> None


//OUTPUT:
//10 -> 20 -> 30 -> None
//5 -> 10 -> 20 -> 30 -> None
//5 -> 10 -> 30 -> None
